{"version":3,"sources":["images/WeatherIcons.gif","apiKeys.js","forcast.js","currentLocation.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","key","base","Forcast","props","_useState","useState","_useState2","_slicedToArray","query","setQuery","_useState3","_useState4","error","setError","_useState5","_useState6","weather","setWeather","search","city","axios","get","concat","apiKeys","then","response","data","catch","console","log","message","defaults","useEffect","React","createElement","className","ReactAnimatedWeather","icon","color","size","animate","type","placeholder","onChange","e","target","value","src","onClick","main","name","sys","country","Math","round","temp","humidity","visibility","wind","speed","_regeneratorRuntime","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","arg","call","h","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","resolve","__await","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","Weather","_React$Component","_inherits","_super","_createSuper","_ref","_this","_classCallCheck","_len","arguments","args","Array","_key","apply","state","lat","undefined","lon","errorMessage","temperatureC","temperatureF","description","sunrise","sunset","errorMsg","getPosition","options","reject","navigator","geolocation","getCurrentPosition","getWeather","_x","_x2","_asyncToGenerator","_callee","api_call","_context","fetch","json","setState","t0","_createClass","_this2","this","position","coords","latitude","longitude","err","alert","timerID","setInterval","clearInterval","Fragment","FontAwesomeIcon","faLocationCrosshairs","id","Clock","format","interval","ticking","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","loader","style","width","WebkitUserDrag","fontSize","fontWeight","marginTop","Component","App","CurrentLocation","href","faFacebook","faTwitter","faLinkedin","faTelegram","faGithub","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8a8e164e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/WeatherIcons.0a218296.gif\";","// Visit https://api.openweathermap.org & then signup to get our API keys for free\nmodule.exports = {\n  key: \"f884976f4dbb3264db1ec55f7122beca\",\n  base: \"https://api.openweathermap.org/data/2.5/\",\n};\n","import React, { useState, useEffect, Component } from \"react\";\nimport axios from \"axios\";\nimport apiKeys from \"./apiKeys\";\nimport ReactAnimatedWeather from \"react-animated-weather\";\n\nfunction Forcast(props) {\n  const [query, setQuery] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [weather, setWeather] = useState({});\n\n  const search = (city) => {\n    axios\n      .get(\n        `${apiKeys.base}weather?q=${\n          city != \"[object Object]\" ? city : query\n        }&units=metric&APPID=${apiKeys.key}`\n      )\n      .then((response) => {\n        setWeather(response.data);\n        setQuery(\"\");\n      })\n      .catch(function (error) {\n        console.log(error);\n        setWeather(\"\");\n        setQuery(\"\");\n        setError({ message: \"Not Found\", query: query });\n      });\n  };\n  function checkTime(i) {\n    if (i < 10) {\n      i = \"0\" + i;\n    } // add zero in front of numbers < 10\n    return i;\n  }\n\n  const defaults = {\n    color: \"white\",\n    size: 112,\n    animate: true,\n  };\n\n  useEffect(() => {\n    search(\"Dhanbad\");\n  }, []);\n\n  return (\n    <div className=\"forecast\">\n      <div className=\"forecast-icon\">\n        <ReactAnimatedWeather\n          icon={props.icon}\n          color={defaults.color}\n          size={defaults.size}\n          animate={defaults.animate}\n        />\n      </div>\n      <div className=\"today-weather\">\n        <h3>{props.weather}</h3>\n        <div className=\"search-box\">\n          <input\n            type=\"text\"\n            className=\"search-bar\"\n            placeholder=\"Search any city\"\n            onChange={(e) => setQuery(e.target.value)}\n            value={query}\n          />\n          <div className=\"img-box\">\n            {\" \"}\n            <img\n              src=\"https://images.avishkaar.cc/workflow/newhp/search-white.png\"\n              onClick={search}\n            />\n          </div>\n        </div>\n        <ul>\n          {typeof weather.main != \"undefined\" ? (\n            <div>\n              {\" \"}\n              <li className=\"cityHead\">\n                <p>\n                  {weather.name}, {weather.sys.country}\n                </p>\n                <img\n                  className=\"temp\"\n                  src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}.png`}\n                />\n              </li>\n              <li>\n                Temperature{\" \"}\n                <span className=\"temp\">\n                  {Math.round(weather.main.temp)}°c ({weather.weather[0].main})\n                </span>\n              </li>\n              <li>\n                Humidity{\" \"}\n                <span className=\"temp\">\n                  {Math.round(weather.main.humidity)}%\n                </span>\n              </li>\n              <li>\n                Visibility{\" \"}\n                <span className=\"temp\">\n                  {Math.round(weather.visibility)} mi\n                </span>\n              </li>\n              <li>\n                Wind Speed{\" \"}\n                <span className=\"temp\">\n                  {Math.round(weather.wind.speed)} Km/h\n                </span>\n              </li>\n            </div>\n          ) : (\n            <li>\n              {error.query} {error.message}\n            </li>\n          )}\n        </ul>\n      </div>\n    </div>\n  );\n}\nexport default Forcast;\n","import React from \"react\";\nimport apiKeys from \"./apiKeys\";\nimport Clock from \"react-live-clock\";\nimport Forcast from \"./forcast\";\nimport loader from \"./images/WeatherIcons.gif\";\nimport ReactAnimatedWeather from \"react-animated-weather\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faLocationCrosshairs } from \"@fortawesome/free-solid-svg-icons\";\nconst dateBuilder = (d) => {\n  let months = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n  let days = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ];\n\n  let day = days[d.getDay()];\n  let date = d.getDate();\n  let month = months[d.getMonth()];\n  let year = d.getFullYear();\n\n  return `${day}, ${date} ${month} ${year}`;\n};\nconst defaults = {\n  color: \"white\",\n  size: 112,\n  animate: true,\n};\nclass Weather extends React.Component {\n  state = {\n    lat: undefined,\n    lon: undefined,\n    errorMessage: undefined,\n    temperatureC: undefined,\n    temperatureF: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    icon: \"CLEAR_DAY\",\n    sunrise: undefined,\n    sunset: undefined,\n    errorMsg: undefined,\n  };\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      this.getPosition()\n        //If user allow location service then will fetch data & send it to get-weather function.\n        .then((position) => {\n          this.getWeather(position.coords.latitude, position.coords.longitude);\n        })\n        .catch((err) => {\n          //If user denied location service then standard location weather will be shown on basis of latitude & latitude.\n          this.getWeather(23.8, 86.45);\n          alert(\n            \"You have disabled location service. Allow 'This APP' to access your location. Your current location will be used for calculating Real time weather.\"\n          );\n        });\n    } else {\n      alert(\"Geolocation not available\");\n    }\n\n    this.timerID = setInterval(\n      () => this.getWeather(this.state.lat, this.state.lon),\n      600000\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  // tick = () => {\n  //   this.getPosition()\n  //   .then((position) => {\n  //     this.getWeather(position.coords.latitude, position.coords.longitude)\n  //   })\n  //   .catch((err) => {\n  //     this.setState({ errorMessage: err.message });\n  //   });\n  // }\n\n  getPosition = (options) => {\n    return new Promise(function (resolve, reject) {\n      navigator.geolocation.getCurrentPosition(resolve, reject, options);\n    });\n  };\n  getWeather = async (lat, lon) => {\n    const api_call = await fetch(\n      `${apiKeys.base}weather?lat=${lat}&lon=${lon}&units=metric&APPID=${apiKeys.key}`\n    );\n    const data = await api_call.json();\n    this.setState({\n      lat: lat,\n      lon: lon,\n      city: data.name,\n      temperatureC: Math.round(data.main.temp),\n      temperatureF: Math.round(data.main.temp * 1.8 + 32),\n      humidity: data.main.humidity,\n      main: data.weather[0].main,\n      country: data.sys.country,\n      // sunrise: this.getTimeFromUnixTimeStamp(data.sys.sunrise),\n\n      // sunset: this.getTimeFromUnixTimeStamp(data.sys.sunset),\n    });\n    switch (this.state.main) {\n      case \"Haze\":\n        this.setState({ icon: \"CLEAR_DAY\" });\n        break;\n      case \"Clouds\":\n        this.setState({ icon: \"CLOUDY\" });\n        break;\n      case \"Rain\":\n        this.setState({ icon: \"RAIN\" });\n        break;\n      case \"Snow\":\n        this.setState({ icon: \"SNOW\" });\n        break;\n      case \"Dust\":\n        this.setState({ icon: \"WIND\" });\n        break;\n      case \"Drizzle\":\n        this.setState({ icon: \"SLEET\" });\n        break;\n      case \"Fog\":\n        this.setState({ icon: \"FOG\" });\n        break;\n      case \"Smoke\":\n        this.setState({ icon: \"FOG\" });\n        break;\n      case \"Tornado\":\n        this.setState({ icon: \"WIND\" });\n        break;\n      default:\n        this.setState({ icon: \"CLEAR_DAY\" });\n    }\n  };\n\n  render() {\n    if (this.state.temperatureC) {\n      return (\n        <React.Fragment>\n          <div className=\"city\">\n            <div className=\"title\">\n              <h2>\n                {this.state.city}{\" \"}\n                <FontAwesomeIcon icon={faLocationCrosshairs} />\n              </h2>\n              <h3 className=\"count\">{this.state.country}</h3>\n            </div>\n            <div className=\"mb-icon\">\n              {\" \"}\n              <ReactAnimatedWeather\n                icon={this.state.icon}\n                color={defaults.color}\n                size={defaults.size}\n                animate={defaults.animate}\n              />\n              <p>{this.state.main}</p>\n            </div>\n            <div className=\"date-time\">\n              <div className=\"dmy\">\n                <div id=\"txt\"></div>\n                <div className=\"current-time\">\n                  <Clock format=\"HH:mm:ss\" interval={1000} ticking={true} />\n                </div>\n                <div className=\"current-date\">{dateBuilder(new Date())}</div>\n              </div>\n              <div className=\"temperature\">\n                <p>\n                  {this.state.temperatureC}°<span>C</span>\n                </p>\n                {/* <span className=\"slash\">/</span>\n                {this.state.temperatureF} &deg;F */}\n              </div>\n            </div>\n          </div>\n          <Forcast icon={this.state.icon} weather={this.state.main} />\n        </React.Fragment>\n      );\n    } else {\n      return (\n        <React.Fragment>\n          <img src={loader} style={{ width: \"50%\", WebkitUserDrag: \"none\" }} />\n          <h3 style={{ color: \"white\", fontSize: \"22px\", fontWeight: \"600\" }}>\n            Detecting your location\n          </h3>\n          <h3 style={{ color: \"white\", marginTop: \"10px\" }}>\n            Your current location wil be displayed on the App <br></br> & used\n            for calculating Real time weather.\n          </h3>\n        </React.Fragment>\n      );\n    }\n  }\n}\n\nexport default Weather;\n","import React, { useState } from \"react\";\nimport CurrentLocation from \"./currentLocation\";\nimport \"./App.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faFacebook,\n  faTwitter,\n  faLinkedin,\n  faTelegram,\n  faGithub,\n} from \"@fortawesome/free-brands-svg-icons\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <div className=\"container\">\n        <CurrentLocation />\n      </div>\n      <div className=\"footer-info\">\n        <p>OpenWeather Links:</p>\n        <a href=\"https://www.facebook.com/groups/270748973021342\">\n          <FontAwesomeIcon icon={faFacebook} />\n        </a>\n        <a target=\"_blank\" href=\"https://twitter.com/OpenWeatherMap\">\n          <FontAwesomeIcon icon={faTwitter} />\n        </a>\n        <a target=\"_blank\" href=\"https://www.linkedin.com/company/9816754\">\n          <FontAwesomeIcon icon={faLinkedin} />\n        </a>\n        <a target=\"_blank\" href=\"https://t.me/openweathermap\">\n          <FontAwesomeIcon icon={faTelegram} />\n        </a>\n        <a target=\"_blank\" href=\"https://github.com/openweathermap\">\n          <FontAwesomeIcon icon={faGithub} />\n        </a>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}